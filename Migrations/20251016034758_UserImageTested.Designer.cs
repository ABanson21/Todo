// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoBackend.Database;

#nullable disable

namespace TodoBackend.Migrations
{
    [DbContext(typeof(AppDatabaseContext))]
    [Migration("20251016034758_UserImageTested")]
    partial class UserImageTested
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoBackend.Model.Belt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color");

                    b.Property<int>("Rank")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.HasKey("Id")
                        .HasName("pk_belt");

                    b.ToTable("belt", (string)null);
                });

            modelBuilder.Entity("TodoBackend.Model.Junctions.ParentStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("studentid");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.HasKey("StudentId", "ParentId")
                        .HasName("pk_parent_student");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_parent_student_parentid");

                    b.ToTable("parent_student", (string)null);
                });

            modelBuilder.Entity("TodoBackend.Model.Junctions.StudentInstructor", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("studentid");

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer")
                        .HasColumnName("instructorid");

                    b.HasKey("StudentId", "InstructorId")
                        .HasName("pk_student_instructor");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("ix_student_instructor_instructorid");

                    b.ToTable("student_instructor", (string)null);
                });

            modelBuilder.Entity("TodoBackend.Model.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("createdbyip");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("replacedbytoken");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("revokedbyip");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_refreshtoken");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refreshtoken_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refreshtoken_userid");

                    b.ToTable("refreshtoken", (string)null);
                });

            modelBuilder.Entity("TodoBackend.Model.StudentProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("BeltId")
                        .HasColumnType("integer")
                        .HasColumnName("beltid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.HasKey("UserId")
                        .HasName("pk_student");

                    b.HasIndex("BeltId")
                        .HasDatabaseName("ix_student_beltid");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("TodoBackend.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profilepictureurl");

                    b.Property<int>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_username");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("TodoBackend.Model.Junctions.ParentStudent", b =>
                {
                    b.HasOne("TodoBackend.Model.User", "Parent")
                        .WithMany("ParentStudents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parent_student_user_parentid");

                    b.HasOne("TodoBackend.Model.StudentProfile", "Student")
                        .WithMany("ParentStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parent_student_student_studentid");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TodoBackend.Model.Junctions.StudentInstructor", b =>
                {
                    b.HasOne("TodoBackend.Model.User", "Instructor")
                        .WithMany("StudentInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_instructor_user_instructorid");

                    b.HasOne("TodoBackend.Model.StudentProfile", "Student")
                        .WithMany("StudentInstructors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_instructor_student_studentid");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TodoBackend.Model.RefreshToken", b =>
                {
                    b.HasOne("TodoBackend.Model.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refreshtoken_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoBackend.Model.StudentProfile", b =>
                {
                    b.HasOne("TodoBackend.Model.Belt", "Belt")
                        .WithMany("StudentProfiles")
                        .HasForeignKey("BeltId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_student_belt_beltid");

                    b.HasOne("TodoBackend.Model.User", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("TodoBackend.Model.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_user_userid");

                    b.Navigation("Belt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoBackend.Model.Belt", b =>
                {
                    b.Navigation("StudentProfiles");
                });

            modelBuilder.Entity("TodoBackend.Model.StudentProfile", b =>
                {
                    b.Navigation("ParentStudents");

                    b.Navigation("StudentInstructors");
                });

            modelBuilder.Entity("TodoBackend.Model.User", b =>
                {
                    b.Navigation("ParentStudents");

                    b.Navigation("RefreshTokens");

                    b.Navigation("StudentInstructors");

                    b.Navigation("StudentProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
